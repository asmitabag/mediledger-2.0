const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

/**
 * Deploy MediLedger contracts to Ethereum network
 */
async function main() {
  console.log("Starting MediLedger contract deployment...\n");

  // Get deployer account
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with account:", deployer.address);

  // Check deployer balance
  const balance = await ethers.provider.getBalance(deployer.address);
  console.log("Account balance:", ethers.formatEther(balance), "ETH");

  if (balance === 0n) {
    throw new Error("Deployer account has no ETH balance");
  }

  // Get network information
  const network = await ethers.provider.getNetwork();
  console.log("Network:", network.name);
  console.log("Chain ID:", network.chainId.toString());
  console.log("");

  // Step 1: Deploy Verifier contract
  console.log("1. Deploying Verifier contract...");

  // Check if Verifier.sol exists (should be generated by snarkjs)
  const verifierPath = path.join(__dirname, "..", "contracts", "Verifier.sol");
  if (!fs.existsSync(verifierPath)) {
    throw new Error(
      "Verifier.sol not found. Run 'npm run setup:zkey' first to generate it."
    );
  }

  const Verifier = await ethers.getContractFactory("Verifier");
  const verifier = await Verifier.deploy();
  await verifier.waitForDeployment();

  const verifierAddress = await verifier.getAddress();
  console.log("‚úÖ Verifier deployed to:", verifierAddress);

  // Step 2: Deploy MedicalRecord contract
  console.log("\n2. Deploying MedicalRecord contract...");

  const MedicalRecord = await ethers.getContractFactory("MedicalRecord");
  const medicalRecord = await MedicalRecord.deploy(verifierAddress);
  await medicalRecord.waitForDeployment();

  const medicalRecordAddress = await medicalRecord.getAddress();
  console.log("‚úÖ MedicalRecord deployed to:", medicalRecordAddress);

  // Step 3: Deploy DrugRegistry contract
  console.log("\n3. Deploying DrugRegistry contract...");

  const DrugRegistry = await ethers.getContractFactory("DrugRegistry");
  const drugRegistry = await DrugRegistry.deploy();
  await drugRegistry.waitForDeployment();

  const drugRegistryAddress = await drugRegistry.getAddress();
  console.log("‚úÖ DrugRegistry deployed to:", drugRegistryAddress);

  // Step 4: Set up roles
  console.log("\n4. Setting up roles...");

  // Grant HEALTHCARE_PROVIDER_ROLE to deployer for testing
  const HEALTHCARE_PROVIDER_ROLE = ethers.keccak256(
    ethers.toUtf8Bytes("HEALTHCARE_PROVIDER_ROLE")
  );
  await medicalRecord.addHealthcareProvider(deployer.address);
  console.log("‚úÖ Granted HEALTHCARE_PROVIDER_ROLE to deployer");

  // Grant roles in DrugRegistry to deployer for testing
  await drugRegistry.addManufacturer(deployer.address);
  console.log("‚úÖ Granted MANUFACTURER_ROLE to deployer");

  await drugRegistry.addDistributor(deployer.address);
  console.log("‚úÖ Granted DISTRIBUTOR_ROLE to deployer");

  await drugRegistry.addMLLogger(deployer.address);
  console.log("‚úÖ Granted ML_LOGGER_ROLE to deployer");

  // Step 5: Verify deployments
  console.log("\n5. Verifying deployments...");

  // Check Verifier
  const code1 = await ethers.provider.getCode(verifierAddress);
  if (code1 === "0x") throw new Error("Verifier deployment failed");
  console.log("‚úÖ Verifier deployment verified");

  // Check MedicalRecord
  const code2 = await ethers.provider.getCode(medicalRecordAddress);
  if (code2 === "0x") throw new Error("MedicalRecord deployment failed");
  console.log("‚úÖ MedicalRecord deployment verified");

  // Check DrugRegistry
  const code3 = await ethers.provider.getCode(drugRegistryAddress);
  if (code3 === "0x") throw new Error("DrugRegistry deployment failed");
  console.log("‚úÖ DrugRegistry deployment verified");

  // Step 6: Save deployment addresses and ABIs
  console.log("\n6. Saving deployment information...");

  const deployedDir = path.join(__dirname, "..", "deployed");
  if (!fs.existsSync(deployedDir)) {
    fs.mkdirSync(deployedDir, { recursive: true });
  }

  // Save addresses
  const addresses = {
    network: network.name,
    chainId: network.chainId.toString(),
    deployer: deployer.address,
    deploymentTimestamp: new Date().toISOString(),
    Verifier: verifierAddress,
    MedicalRecord: medicalRecordAddress,
    DrugRegistry: drugRegistryAddress,
  };

  const addressesPath = path.join(deployedDir, "addresses.json");
  fs.writeFileSync(addressesPath, JSON.stringify(addresses, null, 2));
  console.log("‚úÖ Addresses saved to:", addressesPath);

  // Copy ABIs from artifacts
  const artifactsDir = path.join(__dirname, "..", "artifacts", "contracts");

  // Copy Verifier ABI
  const verifierArtifact = JSON.parse(
    fs.readFileSync(path.join(artifactsDir, "Verifier.sol", "Verifier.json"))
  );
  fs.writeFileSync(
    path.join(deployedDir, "Verifier.json"),
    JSON.stringify(
      {
        address: verifierAddress,
        abi: verifierArtifact.abi,
      },
      null,
      2
    )
  );

  // Copy MedicalRecord ABI
  const medicalRecordArtifact = JSON.parse(
    fs.readFileSync(
      path.join(artifactsDir, "MedicalRecord.sol", "MedicalRecord.json")
    )
  );
  fs.writeFileSync(
    path.join(deployedDir, "MedicalRecord.json"),
    JSON.stringify(
      {
        address: medicalRecordAddress,
        abi: medicalRecordArtifact.abi,
      },
      null,
      2
    )
  );

  // Copy DrugRegistry ABI
  const drugRegistryArtifact = JSON.parse(
    fs.readFileSync(
      path.join(artifactsDir, "DrugRegistry.sol", "DrugRegistry.json")
    )
  );
  fs.writeFileSync(
    path.join(deployedDir, "DrugRegistry.json"),
    JSON.stringify(
      {
        address: drugRegistryAddress,
        abi: drugRegistryArtifact.abi,
      },
      null,
      2
    )
  );

  console.log("‚úÖ ABIs saved to deployed/ directory");

  // Step 7: Estimate gas costs
  console.log("\n7. Gas cost estimates (for reference):");

  // Estimate proof verification cost
  try {
    // Mock proof data for estimation (won't actually call the function)
    const mockA = ["1", "2"];
    const mockB = [
      ["1", "2"],
      ["3", "4"],
    ];
    const mockC = ["5", "6"];
    const mockInput = ["123"];

    const gasEstimate = await medicalRecord.commitRecord
      .estimateGas(mockA, mockB, mockC, mockInput)
      .catch(() => BigInt(500000)); // Fallback estimate

    console.log(
      "   Proof verification + commitment:",
      gasEstimate.toString(),
      "gas"
    );

    // Rough cost calculation (using 20 gwei gas price)
    const gasPriceGwei = 20n;
    const costWei = gasEstimate * gasPriceGwei * 1000000000n;
    const costEth = ethers.formatEther(costWei);
    console.log("   Estimated cost at 20 gwei:", costEth, "ETH");
  } catch (error) {
    console.log("   Could not estimate verification gas cost");
  }

  // Summary
  console.log("\n" + "=".repeat(50));
  console.log("üéâ MediLedger Deployment Complete!");
  console.log("=".repeat(50));
  console.log("Network:", network.name);
  console.log("Deployer:", deployer.address);
  console.log("");
  console.log("Contract Addresses:");
  console.log("  Verifier:      ", verifierAddress);
  console.log("  MedicalRecord: ", medicalRecordAddress);
  console.log("  DrugRegistry:  ", drugRegistryAddress);
  console.log("");
  console.log("Configuration saved to: deployed/");
  console.log("");

  if (network.name === "sepolia") {
    console.log("Etherscan verification commands:");
    console.log(`  npx hardhat verify --network sepolia ${verifierAddress}`);
    console.log(
      `  npx hardhat verify --network sepolia ${medicalRecordAddress} ${verifierAddress}`
    );
    console.log(
      `  npx hardhat verify --network sepolia ${drugRegistryAddress}`
    );
    console.log("");
  }

  console.log("Next steps:");
  console.log("1. Update .env with deployed addresses if needed");
  console.log(
    "2. Test proof generation: node scripts/gen_proof.js <test-file>"
  );
  console.log("3. Test proof submission: node scripts/submit_proof.js");
  console.log(
    "4. Test ML logging: node scripts/log_anomaly.js <batch-id> <prediction-file>"
  );
  console.log("=".repeat(50));

  return {
    verifier: verifierAddress,
    medicalRecord: medicalRecordAddress,
    drugRegistry: drugRegistryAddress,
  };
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then((addresses) => {
    console.log("\nDeployment completed successfully!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå Deployment failed:");
    console.error(error);
    process.exit(1);
  });
